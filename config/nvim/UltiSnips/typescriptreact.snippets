snippet exp "New Experiment" b
<Experiment
	name='enableThreads'
	ifFalse={
		${0:${VISUAL:foo}}
	}
	ifTrue={
		$1${0:${VISUAL:foo}}
	}
/>
endsnippet

snippet t "HTML tag" b
<${1:div}>
	${0:${VISUAL:foo}}
</${1/(\w+).*/$1/}>
endsnippet

snippet re "Require Experiment" b
const Experiment = require('$1../shared/Experiment').default;
endsnippet

snippet ie "Import Experiment" b
import Experiment from '$1../shared/Experiment';
endsnippet

snippet deb "JSON Debug" b
{JSON.stringify($1)}
endsnippet

snippet cn "className"
className={styles.$1}
endsnippet

snippet it "import threads" b
import $1 from 'plaid-threads/$1';
endsnippet

snippet rt "require threads" b
const $1 = require('plaid-threads/$1').default;
endsnippet

snippet mt "margin-top"
u-margin-top-$1
endsnippet

snippet mb "margin-bottom"
u-margin-bottom-$1
endsnippet

snippet pt "padding-top"
u-padding-top-$1
endsnippet

snippet pb "padding-bottom"
u-padding-bottom-$1
endsnippet

snippet rc "react component" b
import React from 'react';

export interface Props {
	children?: React.ReactNode;
}

const $1: React.FC<Props> = (props: Props) => (
	<>$2</>
);

export default $1;
endsnippet

snippet ch "children" b
children?: React.ReactNode;
endsnippet

snippet cx "cx" b
import cx from 'classnames';
endsnippet

snippet st "styles" b
import styles from './$1.module.scss';
endsnippet

snippet story "story" b
import React from 'react';

import $1 from './$1'

export default { title: '' };

export const Default = () => (
$2
);
endsnippet

snippet cl "console.log" b
console.log($1);
endsnippet

snippet ic "icon" b
import $1 from 'plaid-threads/Icons/$1';
endsnippet

snippet test "new test" b
import React from 'react';
import { render } from 'test/test-utils';

import $1, { Props } from '.';

const useRouter = jest.spyOn(require('next/router'), 'useRouter');
const useContext = jest.spyOn(React, 'useContext');

describe('$1', () => {
	it('renders', async () => {
		useRouter.mockImplementationOnce(() => ({}));
		useContext.mockImplementationOnce(() => ({
		}));

		const props: Props = {};

		const { getByRole, getByText } = render(<$1 {...props}/>);
		await getByText('');
		expect(getByRole('heading')).toHaveTextContent(props.title);
	});
});
endsnippet

snippet dn "displayName" b
$1.displayName = '$1';
endsnippet

snippet ed "export default" b
export default $1;
endsnippet

# snippet cs "component story" b
# export const Default: ComponentStory<Props> = {
# 	args: { $1 },
# };
# endsnippet

snippet cs "component story extend" b
export const $1: StoryFn<Props> = (_) => (
	<Button $2>Add Bank</Button>
);

$3
endsnippet


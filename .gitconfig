# private file must define [user] and [core]
[include]
  path = .gitconfig_private
[core]
  pager = delta
[interactive]
  diffFilter = delta --color-only
[delta]
    features = side-by-side line-numbers decorations
    syntax-theme = Monokai Extended Origin
    ; plus-style = syntax "#003800"
    ; minus-style = syntax "#3f0001"

[delta "decorations"]
    commit-decoration-style = bold yellow box ul
    file-style = bold yellow ul
    file-decoration-style = none
    hunk-header-decoration-style = cyan box ul

[delta "line-numbers"]
    line-numbers-left-style = cyan
    line-numbers-right-style = cyan
    line-numbers-minus-style = 124
    line-numbers-plus-style = 28
[color]
  ui = auto
[merge]
  tool = vim_mergetool
  conflictstyle = diff3
[mergetool "vim_mergetool"]
  cmd = vim -f -c "MergetoolStart" "$MERGED" "$BASE" "$LOCAL" "$REMOTE"
  trustExitCode = true
[diff]
  tool = vimdiff
[difftool]
  prompt = false
[alias]
  c = commit
  ca = commit -a
  d = diff --ignore-all-space
  dw = diff --ignore-all-space --word-diff
  dc = diff --cached --ignore-all-space
  r = rebase
  rc = rebase --continue
  p = push -u origin head
  pf = push -f origin head
  a = add
  s = status
  co = checkout
  g = log --pretty=format:"%C(yellow)%h\\ %C(green)%ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=short --graph
  l = diff HEAD^ HEAD
  ll = diff HEAD^^ HEAD^
  lf = diff HEAD^  HEAD --name-only
  llf = diff HEAD^^  HEAD^ --name-only
#  nuke = reset --hard origin/master
#  yolo = "!f() { \
#            curr_branch=$(git rev-parse --abbrev-ref HEAD); \
#            if [ "$curr_branch" = "master" ]; then \
#              echo "~~ cant yolo on master..." && return; \
#   fi; \
#   echo "~~ force pushing origin head"; \
#   git push -f origin head; \
        #          }; f"
  mu = "!f() { \
            echo "~~ updating master"; \
            git fetch origin master; \
            git update-ref --create-reflog refs/heads/master refs/remotes/origin/master; \
        }; f"
  reup = "!f() { \
            git mu; \
            echo "~~ rebasing on origin master"; \
            git pull --rebase origin master; \
            echo "~~ done"; \
          }; f"
[rerere]
	enabled = true
[commit]
	gpgsign = false
[gpg]
	program = gpg
